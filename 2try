.def temp         = r16
.def LcdAddr    = r24

.macro delay
   clr overflows
   ldi milliseconds,@0
  sec_count:
   cpse overflows, milliseconds
  rjmp sec_count
.endmacro

.org 0x0000
 jmp Reset 
.org 0x0020           ; Timer0 overflow handler
 jmp timer_overflow_int  

 Reset:

 ldi temp,high(RAMEND) ; Main program start
 out SPH,temp ; Set Stack Pointer to top of RAM
 ldi temp,low(RAMEND)
 out SPL,temp
 ;cli ; No interrupts

 ldi LcdAddr,0x27 ; Setup LCD display at this address

 ldi temp,193         ; set the TWI bit rate register
 sts TWBR,temp        ; 16000/(16+2*255*64) = 490Hz (page 213)
 ldi temp,0x00 ; set the prescaler bits
 sts TWSR,temp                  ; so the prescale factor is 1

 ldi temp,0b00000011
 out TCCR0B,temp     ; TCNT0 in FCPU/64 mode, 250000 cnts/sec
 ldi temp,249
 out OCR0A, temp     ; top of counter at 250 counts/overflow
                     ;   so overflow occurs every 1/1000 sec
                     ;   this means an overflow every 1ms
 ldi temp,0b00000010 ; 
 out TCCR0A,temp     ; reset clock at top of OCR0A
 sts TIMSK0, temp    ; Enable Timer Overflow Interrupts
 sei                 ; enable global interrupts

 call	LCD_Setup
 rjmp Main

 Main:
 	rjmp Main

 SendStart:
 ldi temp,(1<<TWINT) | (1<<TWSTA) | (1<<TWEN)
 sts TWCR,temp
 call waitTWI
 lds temp,TWSR
 andi temp,0xf8
 cpi temp,0x08
 ret

 SendSLA:
 mov temp,LcdAddr
 add temp,temp
 sts TWDR,temp
 ldi temp,(1<<TWINT) | (1<<TWEN)
 sts TWCR,temp
 call waitTWI
 lds temp,TWSR
 andi temp,0xf8
 cpi temp,0x18
 ret

 sendStop:
 ldi temp,(1<<TWINT) | (1<<TWEN) | (1<<TWSTO)		; and send stop
 sts TWCR,temp
 ldi temp,0
 sendDelay:
 dec temp
 brne sendDelay
 ret

 sendNibble:
 ori r18,0x04
 sts	TWDR,r18
 ldi	r19,(1<<TWINT) | (1<<TWEN)
 sts	TWCR,r19
 call	waitTWI			; destroys r15
 lds	r19,TWSR
 andi	r19,0xf8		; mask out 
 cpi	r19,0x28		; TWSR = data sent, ACK received (0x28)
 brne	sendTWI_Nibble_exit
 andi	r18,0xF0		; set enable bit low
 sts	TWDR,r18
 ldi	r19,(1<<TWINT) | (1<<TWEN)
 sts	TWCR,r19
 call	waitTWI
 lds	r19,TWSR
 andi	r19,0xf8		; mask out 
 cpi	r19,0x28		; TWSR = data sent, ACK received (0x28)
 sendTWI_Nibble_exit:
 ret
 

 waitTWI:
 lds	r15,TWCR
 sbrs	r15,TWINT		; wait until transmitted
 rjmp	waitTWI
 ret

 LCD_Setup:
 delay 5
 call SendStart
 breq next
 jmp LCD_Setup_Err
 next:
 call SendSLA
 breq next1
 jmp  LCD_Setup_Err
 next1:
 ldi r18,0x00
 call sendNibble
 call sendStop
 delay 5

 call SendStart
 breq next2
 jmp LCD_Setup_Err
 next2:
 call SendSLA
 breq next3
 jmp  LCD_Setup_Err
 next3:
 ldi r18,0x30
 call sendNibble
 call sendStop
 delay 5

 call SendStart
 breq next4
 jmp LCD_Setup_Err
 next4:
 call SendSLA
 breq next5
 jmp  LCD_Setup_Err
 next5:
 ldi r18,0x30
 call sendNibble
 call sendStop
 delay 5

 call SendStart
 breq next6
 jmp LCD_Setup_Err
 next6:
 call SendSLA
 breq next7
 jmp  LCD_Setup_Err
 next7:
 ldi r18,0x30
 call sendNibble
 call sendStop
 delay 5

 call SendStart
 breq next8
 jmp LCD_Setup_Err
 next8:
 call SendSLA
 breq next9
 jmp  LCD_Setup_Err
 next9:
 ldi r18,0x20
 call sendNibble
 call sendStop
 delay 5

 call SendStart
 breq next10
 jmp LCD_Setup_Err
 next10:
 call SendSLA
 breq next11
 jmp  LCD_Setup_Err
 next11:
 ldi r18,0x20
 call sendNibble
 ldi r18,0x80
 call sendNibble
 call sendStop
 delay 5

 call SendStart
 breq next12
 jmp LCD_Setup_Err
 next12:
 call SendSLA
 breq next13
 jmp  LCD_Setup_Err
 next13:
 ldi r18,0x00
 call sendNibble
 ldi r18,0x80
 call sendNibble
 call sendStop
 delay 5

 call SendStart
 breq next14
 jmp LCD_Setup_Err
 next14:
 call SendSLA
 breq next15
 jmp  LCD_Setup_Err
 next15:
 ldi r18,0x00
 call sendNibble
 ldi r18,0x10
 call sendNibble
 call sendStop
 delay 5

 call SendStart
 breq next14
 jmp LCD_Setup_Err
 next14:
 call SendSLA
 breq next15
 jmp  LCD_Setup_Err
 next15:
 ldi r18,0x00
 call sendNibble
 ldi r18,0x60
 call sendNibble
 call sendStop
 delay 5
 ret


timer_overflow_int: 
  inc overflows   ; increment 1000 times/sec
  add seed,overflows
reti
