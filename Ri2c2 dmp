
C:\Users\MaxChan\AppData\Local\Temp\arduino_build_282058/I2C_LCD1602.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__vector_16>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 18 02 	jmp	0x430	; 0x430 <__vector_24>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	46 03       	mulsu	r20, r22

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	ea e7       	ldi	r30, 0x7A	; 122
  7e:	f7 e0       	ldi	r31, 0x07	; 7
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	ae 31       	cpi	r26, 0x1E	; 30
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	ae e1       	ldi	r26, 0x1E	; 30
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a2 3d       	cpi	r26, 0xD2	; 210
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 b0 03 	call	0x760	; 0x760 <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 66 03 	call	0x6cc	; 0x6cc <main>
  b6:	0c 94 bb 03 	jmp	0x776	; 0x776 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  be:	cf 92       	push	r12
  c0:	df 92       	push	r13
  c2:	ef 92       	push	r14
  c4:	ff 92       	push	r15
  c6:	0f 93       	push	r16
  c8:	1f 93       	push	r17
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	6c 01       	movw	r12, r24
  d0:	7a 01       	movw	r14, r20
  d2:	8b 01       	movw	r16, r22
  size_t n = 0;
  d4:	c0 e0       	ldi	r28, 0x00	; 0
  d6:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
  d8:	ce 15       	cp	r28, r14
  da:	df 05       	cpc	r29, r15
  dc:	89 f0       	breq	.+34     	; 0x100 <_ZN5Print5writeEPKhj+0x42>
    if (write(*buffer++)) n++;
  de:	d8 01       	movw	r26, r16
  e0:	6d 91       	ld	r22, X+
  e2:	8d 01       	movw	r16, r26
  e4:	d6 01       	movw	r26, r12
  e6:	ed 91       	ld	r30, X+
  e8:	fc 91       	ld	r31, X
  ea:	01 90       	ld	r0, Z+
  ec:	f0 81       	ld	r31, Z
  ee:	e0 2d       	mov	r30, r0
  f0:	c6 01       	movw	r24, r12
  f2:	09 95       	icall
  f4:	89 2b       	or	r24, r25
  f6:	11 f4       	brne	.+4      	; 0xfc <_ZN5Print5writeEPKhj+0x3e>
  f8:	7e 01       	movw	r14, r28
  fa:	02 c0       	rjmp	.+4      	; 0x100 <_ZN5Print5writeEPKhj+0x42>
  fc:	21 96       	adiw	r28, 0x01	; 1
  fe:	ec cf       	rjmp	.-40     	; 0xd8 <_ZN5Print5writeEPKhj+0x1a>
    else break;
  }
  return n;
}
 100:	c7 01       	movw	r24, r14
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	1f 91       	pop	r17
 108:	0f 91       	pop	r16
 10a:	ff 90       	pop	r15
 10c:	ef 90       	pop	r14
 10e:	df 90       	pop	r13
 110:	cf 90       	pop	r12
 112:	08 95       	ret

00000114 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
 114:	85 ed       	ldi	r24, 0xD5	; 213
 116:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
 11a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 11e:	84 fd       	sbrc	r24, 4
 120:	fc cf       	rjmp	.-8      	; 0x11a <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
 122:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <twi_state>
 126:	08 95       	ret

00000128 <twi_transmit>:
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < (twi_txBufferLength+length)){
 128:	40 91 41 01 	lds	r20, 0x0141	; 0x800141 <twi_txBufferLength>
 12c:	26 2f       	mov	r18, r22
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	24 0f       	add	r18, r20
 132:	31 1d       	adc	r19, r1
 134:	21 32       	cpi	r18, 0x21	; 33
 136:	31 05       	cpc	r19, r1
 138:	dc f4       	brge	.+54     	; 0x170 <twi_transmit+0x48>
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
 13a:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <twi_state>
 13e:	24 30       	cpi	r18, 0x04	; 4
 140:	c9 f4       	brne	.+50     	; 0x174 <twi_transmit+0x4c>
 142:	fc 01       	movw	r30, r24
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
 148:	86 17       	cp	r24, r22
 14a:	58 f4       	brcc	.+22     	; 0x162 <twi_transmit+0x3a>
    twi_txBuffer[twi_txBufferLength+i] = data[i];
 14c:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <twi_txBufferLength>
 150:	21 91       	ld	r18, Z+
 152:	dc 01       	movw	r26, r24
 154:	a1 5e       	subi	r26, 0xE1	; 225
 156:	be 4f       	sbci	r27, 0xFE	; 254
 158:	a3 0f       	add	r26, r19
 15a:	b1 1d       	adc	r27, r1
 15c:	2c 93       	st	X, r18
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	f3 cf       	rjmp	.-26     	; 0x148 <twi_transmit+0x20>
  }
  twi_txBufferLength += length;
 162:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <twi_txBufferLength>
 166:	68 0f       	add	r22, r24
 168:	60 93 41 01 	sts	0x0141, r22	; 0x800141 <twi_txBufferLength>
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	08 95       	ret
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < (twi_txBufferLength+length)){
    return 1;
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	08 95       	ret
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    return 2;
 174:	82 e0       	ldi	r24, 0x02	; 2
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
  
  return 0;
}
 176:	08 95       	ret

00000178 <_ZN7TwoWire5flushEv>:

  return value;
}

void TwoWire::flush(void)
{
 178:	08 95       	ret

0000017a <_ZN7TwoWire4peekEv>:
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	9f ef       	ldi	r25, 0xFF	; 255
 17e:	08 95       	ret

00000180 <_ZN7TwoWire4readEv>:
    value = rxBuffer[rxBufferIndex];
    ++rxBufferIndex;
  }

  return value;
}
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	9f ef       	ldi	r25, 0xFF	; 255
 184:	08 95       	ret

00000186 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
 186:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
 18a:	90 e0       	ldi	r25, 0x00	; 0
}
 18c:	91 95       	neg	r25
 18e:	81 95       	neg	r24
 190:	91 09       	sbc	r25, r1
 192:	08 95       	ret

00000194 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 194:	cf 92       	push	r12
 196:	df 92       	push	r13
 198:	ef 92       	push	r14
 19a:	ff 92       	push	r15
 19c:	0f 93       	push	r16
 19e:	1f 93       	push	r17
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	7c 01       	movw	r14, r24
 1a6:	26 2f       	mov	r18, r22
 1a8:	97 2f       	mov	r25, r23
 1aa:	8a 01       	movw	r16, r20
  if(transmitting){
 1ac:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <_ZN7TwoWire12transmittingE>
 1b0:	88 23       	and	r24, r24
 1b2:	91 f0       	breq	.+36     	; 0x1d8 <_ZN7TwoWire5writeEPKhj+0x44>
 1b4:	c6 2f       	mov	r28, r22
 1b6:	d7 2f       	mov	r29, r23
 1b8:	6e 01       	movw	r12, r28
 1ba:	c4 0e       	add	r12, r20
 1bc:	d5 1e       	adc	r13, r21
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 1be:	cc 15       	cp	r28, r12
 1c0:	dd 05       	cpc	r29, r13
 1c2:	71 f0       	breq	.+28     	; 0x1e0 <_ZN7TwoWire5writeEPKhj+0x4c>
      write(data[i]);
 1c4:	69 91       	ld	r22, Y+
 1c6:	d7 01       	movw	r26, r14
 1c8:	ed 91       	ld	r30, X+
 1ca:	fc 91       	ld	r31, X
 1cc:	01 90       	ld	r0, Z+
 1ce:	f0 81       	ld	r31, Z
 1d0:	e0 2d       	mov	r30, r0
 1d2:	c7 01       	movw	r24, r14
 1d4:	09 95       	icall
 1d6:	f3 cf       	rjmp	.-26     	; 0x1be <_ZN7TwoWire5writeEPKhj+0x2a>
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
 1d8:	64 2f       	mov	r22, r20
 1da:	82 2f       	mov	r24, r18
 1dc:	0e 94 94 00 	call	0x128	; 0x128 <twi_transmit>
  }
  return quantity;
}
 1e0:	c8 01       	movw	r24, r16
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	1f 91       	pop	r17
 1e8:	0f 91       	pop	r16
 1ea:	ff 90       	pop	r15
 1ec:	ef 90       	pop	r14
 1ee:	df 90       	pop	r13
 1f0:	cf 90       	pop	r12
 1f2:	08 95       	ret

000001f4 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	1f 92       	push	r1
 1fa:	cd b7       	in	r28, 0x3d	; 61
 1fc:	de b7       	in	r29, 0x3e	; 62
 1fe:	69 83       	std	Y+1, r22	; 0x01
  if(transmitting){
 200:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <_ZN7TwoWire12transmittingE>
 204:	22 23       	and	r18, r18
 206:	d1 f0       	breq	.+52     	; 0x23c <_ZN7TwoWire5writeEh+0x48>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 208:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <_ZN7TwoWire14txBufferLengthE>
 20c:	20 32       	cpi	r18, 0x20	; 32
 20e:	40 f0       	brcs	.+16     	; 0x220 <_ZN7TwoWire5writeEh+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 210:	21 e0       	ldi	r18, 0x01	; 1
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	fc 01       	movw	r30, r24
 216:	33 83       	std	Z+3, r19	; 0x03
 218:	22 83       	std	Z+2, r18	; 0x02
      setWriteError();
      return 0;
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	15 c0       	rjmp	.+42     	; 0x24a <_ZN7TwoWire5writeEh+0x56>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 220:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <_ZN7TwoWire13txBufferIndexE>
 224:	e8 2f       	mov	r30, r24
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	e1 57       	subi	r30, 0x71	; 113
 22a:	fe 4f       	sbci	r31, 0xFE	; 254
 22c:	99 81       	ldd	r25, Y+1	; 0x01
 22e:	90 83       	st	Z, r25
    ++txBufferIndex;
 230:	8f 5f       	subi	r24, 0xFF	; 255
 232:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <_ZN7TwoWire13txBufferIndexE>
    // update amount in buffer   
    txBufferLength = txBufferIndex;
 236:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <_ZN7TwoWire14txBufferLengthE>
 23a:	05 c0       	rjmp	.+10     	; 0x246 <_ZN7TwoWire5writeEh+0x52>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
 23c:	61 e0       	ldi	r22, 0x01	; 1
 23e:	ce 01       	movw	r24, r28
 240:	01 96       	adiw	r24, 0x01	; 1
 242:	0e 94 94 00 	call	0x128	; 0x128 <twi_transmit>
  }
  return 1;
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
}
 24a:	0f 90       	pop	r0
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	08 95       	ret

00000252 <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
void LiquidCrystal_I2C::write4bits(uint8_t value) {
	expanderWrite(value);
	pulseEnable(value);
}

void LiquidCrystal_I2C::expanderWrite(uint8_t _data){                                        
 252:	cf 93       	push	r28
	Wire.beginTransmission(_Addr);
 254:	fc 01       	movw	r30, r24
 256:	c4 81       	ldd	r28, Z+4	; 0x04
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
 258:	21 e0       	ldi	r18, 0x01	; 1
 25a:	20 93 8d 01 	sts	0x018D, r18	; 0x80018d <_ZN7TwoWire12transmittingE>
  // set address of targeted slave
  txAddress = address;
 25e:	c0 93 af 01 	sts	0x01AF, r28	; 0x8001af <_ZN7TwoWire9txAddressE>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 262:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
 266:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <_ZN7TwoWire14txBufferLengthE>
	printIIC((int)(_data) | _backlightval);
 26a:	83 85       	ldd	r24, Z+11	; 0x0b
 26c:	68 2b       	or	r22, r24
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
 26e:	8a eb       	ldi	r24, 0xBA	; 186
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_ZN7TwoWire5writeEh>
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
 276:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <_ZN7TwoWire14txBufferLengthE>
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
 27a:	81 32       	cpi	r24, 0x21	; 33
 27c:	08 f0       	brcs	.+2      	; 0x280 <_ZN17LiquidCrystal_I2C13expanderWriteEh+0x2e>
 27e:	46 c0       	rjmp	.+140    	; 0x30c <_ZN17LiquidCrystal_I2C13expanderWriteEh+0xba>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
 280:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <twi_state>
 284:	91 11       	cpse	r25, r1
 286:	fc cf       	rjmp	.-8      	; 0x280 <_ZN17LiquidCrystal_I2C13expanderWriteEh+0x2e>
    continue;
  }
  twi_state = TWI_MTX;
 288:	92 e0       	ldi	r25, 0x02	; 2
 28a:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <twi_state>
  twi_sendStop = sendStop;
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <twi_sendStop>
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
 294:	9f ef       	ldi	r25, 0xFF	; 255
 296:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <twi_error>

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
 29a:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <twi_masterBufferIndex>
  twi_masterBufferLength = length;
 29e:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <twi_masterBufferLength>
 2a2:	af e8       	ldi	r26, 0x8F	; 143
 2a4:	b1 e0       	ldi	r27, 0x01	; 1
 2a6:	28 e6       	ldi	r18, 0x68	; 104
 2a8:	31 e0       	ldi	r19, 0x01	; 1
 2aa:	f9 01       	movw	r30, r18
 2ac:	9e 2f       	mov	r25, r30
 2ae:	92 1b       	sub	r25, r18
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
 2b0:	98 17       	cp	r25, r24
 2b2:	18 f4       	brcc	.+6      	; 0x2ba <_ZN17LiquidCrystal_I2C13expanderWriteEh+0x68>
    twi_masterBuffer[i] = data[i];
 2b4:	9d 91       	ld	r25, X+
 2b6:	91 93       	st	Z+, r25
 2b8:	f9 cf       	rjmp	.-14     	; 0x2ac <_ZN17LiquidCrystal_I2C13expanderWriteEh+0x5a>
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
 2ba:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <twi_slarw>
  twi_slarw |= address << 1;
 2be:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <twi_slarw>
 2c2:	cc 0f       	add	r28, r28
 2c4:	c8 2b       	or	r28, r24
 2c6:	c0 93 67 01 	sts	0x0167, r28	; 0x800167 <twi_slarw>
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
 2ca:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <twi_inRepStart>
 2ce:	81 30       	cpi	r24, 0x01	; 1
 2d0:	61 f4       	brne	.+24     	; 0x2ea <_ZN17LiquidCrystal_I2C13expanderWriteEh+0x98>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
 2d2:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <twi_inRepStart>
    do {
      TWDR = twi_slarw;				
 2d6:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <twi_slarw>
 2da:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    } while(TWCR & _BV(TWWC));
 2de:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2e2:	83 fd       	sbrc	r24, 3
 2e4:	f8 cf       	rjmp	.-16     	; 0x2d6 <_ZN17LiquidCrystal_I2C13expanderWriteEh+0x84>
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
 2e6:	85 ec       	ldi	r24, 0xC5	; 197
 2e8:	01 c0       	rjmp	.+2      	; 0x2ec <_ZN17LiquidCrystal_I2C13expanderWriteEh+0x9a>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
 2ea:	85 ee       	ldi	r24, 0xE5	; 229
 2ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
 2f0:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <twi_state>
 2f4:	82 30       	cpi	r24, 0x02	; 2
 2f6:	e1 f3       	breq	.-8      	; 0x2f0 <_ZN17LiquidCrystal_I2C13expanderWriteEh+0x9e>
    continue;
  }
  
  if (twi_error == 0xFF)
 2f8:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <twi_error>
 2fc:	8f 3f       	cpi	r24, 0xFF	; 255
 2fe:	31 f0       	breq	.+12     	; 0x30c <_ZN17LiquidCrystal_I2C13expanderWriteEh+0xba>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
 300:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <twi_error>
 304:	80 32       	cpi	r24, 0x20	; 32
 306:	11 f0       	breq	.+4      	; 0x30c <_ZN17LiquidCrystal_I2C13expanderWriteEh+0xba>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
 308:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <twi_error>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 30c:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
 310:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <_ZN7TwoWire14txBufferLengthE>
  // indicate that we are done transmitting
  transmitting = 0;
 314:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <_ZN7TwoWire12transmittingE>
	Wire.endTransmission();   
}
 318:	cf 91       	pop	r28
 31a:	08 95       	ret

0000031c <_ZN17LiquidCrystal_I2C11pulseEnableEh>:

void LiquidCrystal_I2C::pulseEnable(uint8_t _data){
 31c:	0f 93       	push	r16
 31e:	1f 93       	push	r17
 320:	cf 93       	push	r28
 322:	8c 01       	movw	r16, r24
 324:	c6 2f       	mov	r28, r22
	expanderWrite(_data | En);	// En high
 326:	64 60       	ori	r22, 0x04	; 4
 328:	0e 94 29 01 	call	0x252	; 0x252 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delayMicroseconds(1);		// enable pulse must be >450ns
	
	expanderWrite(_data & ~En);	// En low
 32c:	6c 2f       	mov	r22, r28
 32e:	6b 7f       	andi	r22, 0xFB	; 251
 330:	c8 01       	movw	r24, r16
 332:	0e 94 29 01 	call	0x252	; 0x252 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	

#endif

	// busy wait
	__asm__ __volatile__ (
 336:	83 ec       	ldi	r24, 0xC3	; 195
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	01 97       	sbiw	r24, 0x01	; 1
 33c:	f1 f7       	brne	.-4      	; 0x33a <_ZN17LiquidCrystal_I2C11pulseEnableEh+0x1e>
	delayMicroseconds(50);		// commands need > 37us to settle
} 
 33e:	cf 91       	pop	r28
 340:	1f 91       	pop	r17
 342:	0f 91       	pop	r16
 344:	08 95       	ret

00000346 <_ZN17LiquidCrystal_I2C5writeEh>:
#if defined(ARDUINO) && ARDUINO >= 100

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
 346:	0f 93       	push	r16
 348:	1f 93       	push	r17
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
 34e:	8c 01       	movw	r16, r24
 350:	c6 2f       	mov	r28, r22

/************ low level data pushing commands **********/

// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
	uint8_t highnib=value&0xf0;
 352:	d6 2f       	mov	r29, r22
 354:	d0 7f       	andi	r29, 0xF0	; 240
	uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
 356:	d1 60       	ori	r29, 0x01	; 1
	write4bits((lownib)|mode); 
}

void LiquidCrystal_I2C::write4bits(uint8_t value) {
	expanderWrite(value);
 358:	6d 2f       	mov	r22, r29
 35a:	0e 94 29 01 	call	0x252	; 0x252 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	pulseEnable(value);
 35e:	6d 2f       	mov	r22, r29
 360:	c8 01       	movw	r24, r16
 362:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN17LiquidCrystal_I2C11pulseEnableEh>
/************ low level data pushing commands **********/

// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
	uint8_t highnib=value&0xf0;
	uint8_t lownib=(value<<4)&0xf0;
 366:	80 e1       	ldi	r24, 0x10	; 16
 368:	c8 9f       	mul	r28, r24
 36a:	b0 01       	movw	r22, r0
 36c:	11 24       	eor	r1, r1
       write4bits((highnib)|mode);
	write4bits((lownib)|mode); 
 36e:	c6 2f       	mov	r28, r22
 370:	c1 60       	ori	r28, 0x01	; 1
}

void LiquidCrystal_I2C::write4bits(uint8_t value) {
	expanderWrite(value);
 372:	6c 2f       	mov	r22, r28
 374:	c8 01       	movw	r24, r16
 376:	0e 94 29 01 	call	0x252	; 0x252 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	pulseEnable(value);
 37a:	6c 2f       	mov	r22, r28
 37c:	c8 01       	movw	r24, r16
 37e:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN17LiquidCrystal_I2C11pulseEnableEh>

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
	return 1;
}
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	1f 91       	pop	r17
 38c:	0f 91       	pop	r16
 38e:	08 95       	ret

00000390 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
 390:	08 95       	ret

00000392 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	08 95       	ret

00000398 <__cxa_pure_virtual>:
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
 398:	0e 94 b6 03 	call	0x76c	; 0x76c <abort>

0000039c <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 39c:	1f 92       	push	r1
 39e:	0f 92       	push	r0
 3a0:	0f b6       	in	r0, 0x3f	; 63
 3a2:	0f 92       	push	r0
 3a4:	11 24       	eor	r1, r1
 3a6:	2f 93       	push	r18
 3a8:	3f 93       	push	r19
 3aa:	8f 93       	push	r24
 3ac:	9f 93       	push	r25
 3ae:	af 93       	push	r26
 3b0:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 3b2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <timer0_millis>
 3b6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <timer0_millis+0x1>
 3ba:	a0 91 b8 01 	lds	r26, 0x01B8	; 0x8001b8 <timer0_millis+0x2>
 3be:	b0 91 b9 01 	lds	r27, 0x01B9	; 0x8001b9 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
 3c2:	30 91 b5 01 	lds	r19, 0x01B5	; 0x8001b5 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
 3c6:	23 e0       	ldi	r18, 0x03	; 3
 3c8:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
 3ca:	2d 37       	cpi	r18, 0x7D	; 125
 3cc:	20 f4       	brcc	.+8      	; 0x3d6 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 3ce:	01 96       	adiw	r24, 0x01	; 1
 3d0:	a1 1d       	adc	r26, r1
 3d2:	b1 1d       	adc	r27, r1
 3d4:	05 c0       	rjmp	.+10     	; 0x3e0 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 3d6:	26 e8       	ldi	r18, 0x86	; 134
 3d8:	23 0f       	add	r18, r19
		m += 1;
 3da:	02 96       	adiw	r24, 0x02	; 2
 3dc:	a1 1d       	adc	r26, r1
 3de:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 3e0:	20 93 b5 01 	sts	0x01B5, r18	; 0x8001b5 <timer0_fract>
	timer0_millis = m;
 3e4:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <timer0_millis>
 3e8:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <timer0_millis+0x1>
 3ec:	a0 93 b8 01 	sts	0x01B8, r26	; 0x8001b8 <timer0_millis+0x2>
 3f0:	b0 93 b9 01 	sts	0x01B9, r27	; 0x8001b9 <timer0_millis+0x3>
	timer0_overflow_count++;
 3f4:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <timer0_overflow_count>
 3f8:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <timer0_overflow_count+0x1>
 3fc:	a0 91 b3 01 	lds	r26, 0x01B3	; 0x8001b3 <timer0_overflow_count+0x2>
 400:	b0 91 b4 01 	lds	r27, 0x01B4	; 0x8001b4 <timer0_overflow_count+0x3>
 404:	01 96       	adiw	r24, 0x01	; 1
 406:	a1 1d       	adc	r26, r1
 408:	b1 1d       	adc	r27, r1
 40a:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <timer0_overflow_count>
 40e:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <timer0_overflow_count+0x1>
 412:	a0 93 b3 01 	sts	0x01B3, r26	; 0x8001b3 <timer0_overflow_count+0x2>
 416:	b0 93 b4 01 	sts	0x01B4, r27	; 0x8001b4 <timer0_overflow_count+0x3>
}
 41a:	bf 91       	pop	r27
 41c:	af 91       	pop	r26
 41e:	9f 91       	pop	r25
 420:	8f 91       	pop	r24
 422:	3f 91       	pop	r19
 424:	2f 91       	pop	r18
 426:	0f 90       	pop	r0
 428:	0f be       	out	0x3f, r0	; 63
 42a:	0f 90       	pop	r0
 42c:	1f 90       	pop	r1
 42e:	18 95       	reti

00000430 <__vector_24>:
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
 430:	1f 92       	push	r1
 432:	0f 92       	push	r0
 434:	0f b6       	in	r0, 0x3f	; 63
 436:	0f 92       	push	r0
 438:	11 24       	eor	r1, r1
 43a:	2f 93       	push	r18
 43c:	3f 93       	push	r19
 43e:	4f 93       	push	r20
 440:	5f 93       	push	r21
 442:	6f 93       	push	r22
 444:	7f 93       	push	r23
 446:	8f 93       	push	r24
 448:	9f 93       	push	r25
 44a:	af 93       	push	r26
 44c:	bf 93       	push	r27
 44e:	ef 93       	push	r30
 450:	ff 93       	push	r31
  switch(TW_STATUS){
 452:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 456:	88 7f       	andi	r24, 0xF8	; 248
 458:	80 36       	cpi	r24, 0x60	; 96
 45a:	09 f4       	brne	.+2      	; 0x45e <__vector_24+0x2e>
 45c:	9c c0       	rjmp	.+312    	; 0x596 <__vector_24+0x166>
 45e:	68 f5       	brcc	.+90     	; 0x4ba <__vector_24+0x8a>
 460:	88 32       	cpi	r24, 0x28	; 40
 462:	09 f4       	brne	.+2      	; 0x466 <__vector_24+0x36>
 464:	5b c0       	rjmp	.+182    	; 0x51c <__vector_24+0xec>
 466:	90 f4       	brcc	.+36     	; 0x48c <__vector_24+0x5c>
 468:	80 31       	cpi	r24, 0x10	; 16
 46a:	09 f4       	brne	.+2      	; 0x46e <__vector_24+0x3e>
 46c:	54 c0       	rjmp	.+168    	; 0x516 <__vector_24+0xe6>
 46e:	38 f4       	brcc	.+14     	; 0x47e <__vector_24+0x4e>
 470:	88 23       	and	r24, r24
 472:	09 f4       	brne	.+2      	; 0x476 <__vector_24+0x46>
 474:	f6 c0       	rjmp	.+492    	; 0x662 <__vector_24+0x232>
 476:	88 30       	cpi	r24, 0x08	; 8
 478:	09 f4       	brne	.+2      	; 0x47c <__vector_24+0x4c>
 47a:	4d c0       	rjmp	.+154    	; 0x516 <__vector_24+0xe6>
 47c:	f6 c0       	rjmp	.+492    	; 0x66a <__vector_24+0x23a>
 47e:	88 31       	cpi	r24, 0x18	; 24
 480:	09 f4       	brne	.+2      	; 0x484 <__vector_24+0x54>
 482:	4c c0       	rjmp	.+152    	; 0x51c <__vector_24+0xec>
 484:	80 32       	cpi	r24, 0x20	; 32
 486:	09 f4       	brne	.+2      	; 0x48a <__vector_24+0x5a>
 488:	5d c0       	rjmp	.+186    	; 0x544 <__vector_24+0x114>
 48a:	ef c0       	rjmp	.+478    	; 0x66a <__vector_24+0x23a>
 48c:	80 34       	cpi	r24, 0x40	; 64
 48e:	09 f4       	brne	.+2      	; 0x492 <__vector_24+0x62>
 490:	68 c0       	rjmp	.+208    	; 0x562 <__vector_24+0x132>
 492:	48 f4       	brcc	.+18     	; 0x4a6 <__vector_24+0x76>
 494:	80 33       	cpi	r24, 0x30	; 48
 496:	09 f4       	brne	.+2      	; 0x49a <__vector_24+0x6a>
 498:	55 c0       	rjmp	.+170    	; 0x544 <__vector_24+0x114>
 49a:	88 33       	cpi	r24, 0x38	; 56
 49c:	09 f0       	breq	.+2      	; 0x4a0 <__vector_24+0x70>
 49e:	e5 c0       	rjmp	.+458    	; 0x66a <__vector_24+0x23a>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
 4a0:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <twi_error>
 4a4:	d8 c0       	rjmp	.+432    	; 0x656 <__vector_24+0x226>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
 4a6:	80 35       	cpi	r24, 0x50	; 80
 4a8:	09 f4       	brne	.+2      	; 0x4ac <__vector_24+0x7c>
 4aa:	4f c0       	rjmp	.+158    	; 0x54a <__vector_24+0x11a>
 4ac:	88 35       	cpi	r24, 0x58	; 88
 4ae:	09 f4       	brne	.+2      	; 0x4b2 <__vector_24+0x82>
 4b0:	5d c0       	rjmp	.+186    	; 0x56c <__vector_24+0x13c>
 4b2:	88 34       	cpi	r24, 0x48	; 72
 4b4:	09 f0       	breq	.+2      	; 0x4b8 <__vector_24+0x88>
 4b6:	d9 c0       	rjmp	.+434    	; 0x66a <__vector_24+0x23a>
 4b8:	d6 c0       	rjmp	.+428    	; 0x666 <__vector_24+0x236>
 4ba:	88 39       	cpi	r24, 0x98	; 152
 4bc:	09 f4       	brne	.+2      	; 0x4c0 <__vector_24+0x90>
 4be:	c7 c0       	rjmp	.+398    	; 0x64e <__vector_24+0x21e>
 4c0:	a8 f4       	brcc	.+42     	; 0x4ec <__vector_24+0xbc>
 4c2:	88 37       	cpi	r24, 0x78	; 120
 4c4:	09 f4       	brne	.+2      	; 0x4c8 <__vector_24+0x98>
 4c6:	67 c0       	rjmp	.+206    	; 0x596 <__vector_24+0x166>
 4c8:	38 f4       	brcc	.+14     	; 0x4d8 <__vector_24+0xa8>
 4ca:	88 36       	cpi	r24, 0x68	; 104
 4cc:	09 f4       	brne	.+2      	; 0x4d0 <__vector_24+0xa0>
 4ce:	63 c0       	rjmp	.+198    	; 0x596 <__vector_24+0x166>
 4d0:	80 37       	cpi	r24, 0x70	; 112
 4d2:	09 f4       	brne	.+2      	; 0x4d6 <__vector_24+0xa6>
 4d4:	60 c0       	rjmp	.+192    	; 0x596 <__vector_24+0x166>
 4d6:	c9 c0       	rjmp	.+402    	; 0x66a <__vector_24+0x23a>
 4d8:	88 38       	cpi	r24, 0x88	; 136
 4da:	09 f4       	brne	.+2      	; 0x4de <__vector_24+0xae>
 4dc:	b8 c0       	rjmp	.+368    	; 0x64e <__vector_24+0x21e>
 4de:	80 39       	cpi	r24, 0x90	; 144
 4e0:	09 f4       	brne	.+2      	; 0x4e4 <__vector_24+0xb4>
 4e2:	5f c0       	rjmp	.+190    	; 0x5a2 <__vector_24+0x172>
 4e4:	80 38       	cpi	r24, 0x80	; 128
 4e6:	09 f0       	breq	.+2      	; 0x4ea <__vector_24+0xba>
 4e8:	c0 c0       	rjmp	.+384    	; 0x66a <__vector_24+0x23a>
 4ea:	5b c0       	rjmp	.+182    	; 0x5a2 <__vector_24+0x172>
 4ec:	80 3b       	cpi	r24, 0xB0	; 176
 4ee:	09 f4       	brne	.+2      	; 0x4f2 <__vector_24+0xc2>
 4f0:	86 c0       	rjmp	.+268    	; 0x5fe <__vector_24+0x1ce>
 4f2:	38 f4       	brcc	.+14     	; 0x502 <__vector_24+0xd2>
 4f4:	80 3a       	cpi	r24, 0xA0	; 160
 4f6:	09 f4       	brne	.+2      	; 0x4fa <__vector_24+0xca>
 4f8:	66 c0       	rjmp	.+204    	; 0x5c6 <__vector_24+0x196>
 4fa:	88 3a       	cpi	r24, 0xA8	; 168
 4fc:	09 f4       	brne	.+2      	; 0x500 <__vector_24+0xd0>
 4fe:	7f c0       	rjmp	.+254    	; 0x5fe <__vector_24+0x1ce>
 500:	b4 c0       	rjmp	.+360    	; 0x66a <__vector_24+0x23a>
 502:	80 3c       	cpi	r24, 0xC0	; 192
 504:	09 f4       	brne	.+2      	; 0x508 <__vector_24+0xd8>
 506:	a7 c0       	rjmp	.+334    	; 0x656 <__vector_24+0x226>
 508:	88 3c       	cpi	r24, 0xC8	; 200
 50a:	09 f4       	brne	.+2      	; 0x50e <__vector_24+0xde>
 50c:	a4 c0       	rjmp	.+328    	; 0x656 <__vector_24+0x226>
 50e:	88 3b       	cpi	r24, 0xB8	; 184
 510:	09 f4       	brne	.+2      	; 0x514 <__vector_24+0xe4>
 512:	8a c0       	rjmp	.+276    	; 0x628 <__vector_24+0x1f8>
 514:	aa c0       	rjmp	.+340    	; 0x66a <__vector_24+0x23a>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
 516:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <twi_slarw>
 51a:	10 c0       	rjmp	.+32     	; 0x53c <__vector_24+0x10c>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
 51c:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <twi_masterBufferIndex>
 520:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <twi_masterBufferLength>
 524:	98 17       	cp	r25, r24
 526:	70 f5       	brcc	.+92     	; 0x584 <__vector_24+0x154>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
 528:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <twi_masterBufferIndex>
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	8e 0f       	add	r24, r30
 530:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <twi_masterBufferIndex>
 534:	f0 e0       	ldi	r31, 0x00	; 0
 536:	e8 59       	subi	r30, 0x98	; 152
 538:	fe 4f       	sbci	r31, 0xFE	; 254
 53a:	80 81       	ld	r24, Z
 53c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 540:	85 ec       	ldi	r24, 0xC5	; 197
 542:	86 c0       	rjmp	.+268    	; 0x650 <__vector_24+0x220>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
 544:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <twi_error>
 548:	8e c0       	rjmp	.+284    	; 0x666 <__vector_24+0x236>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
 54a:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <twi_masterBufferIndex>
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	8e 0f       	add	r24, r30
 552:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <twi_masterBufferIndex>
 556:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 55a:	f0 e0       	ldi	r31, 0x00	; 0
 55c:	e8 59       	subi	r30, 0x98	; 152
 55e:	fe 4f       	sbci	r31, 0xFE	; 254
 560:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
 562:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <twi_masterBufferIndex>
 566:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <twi_masterBufferLength>
 56a:	6e c0       	rjmp	.+220    	; 0x648 <__vector_24+0x218>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
 56c:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <twi_masterBufferIndex>
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	8e 0f       	add	r24, r30
 574:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <twi_masterBufferIndex>
 578:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 57c:	f0 e0       	ldi	r31, 0x00	; 0
 57e:	e8 59       	subi	r30, 0x98	; 152
 580:	fe 4f       	sbci	r31, 0xFE	; 254
 582:	80 83       	st	Z, r24
	if (twi_sendStop)
 584:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <twi_sendStop>
 588:	81 11       	cpse	r24, r1
 58a:	6d c0       	rjmp	.+218    	; 0x666 <__vector_24+0x236>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
 592:	84 ea       	ldi	r24, 0xA4	; 164
 594:	61 c0       	rjmp	.+194    	; 0x658 <__vector_24+0x228>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
 596:	83 e0       	ldi	r24, 0x03	; 3
 598:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
 59c:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <twi_rxBufferIndex>
 5a0:	cf cf       	rjmp	.-98     	; 0x540 <__vector_24+0x110>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
 5a2:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <twi_rxBufferIndex>
 5a6:	80 32       	cpi	r24, 0x20	; 32
 5a8:	08 f0       	brcs	.+2      	; 0x5ac <__vector_24+0x17c>
 5aa:	51 c0       	rjmp	.+162    	; 0x64e <__vector_24+0x21e>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
 5ac:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <twi_rxBufferIndex>
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	8e 0f       	add	r24, r30
 5b4:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <twi_rxBufferIndex>
 5b8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 5bc:	f0 e0       	ldi	r31, 0x00	; 0
 5be:	eb 5b       	subi	r30, 0xBB	; 187
 5c0:	fe 4f       	sbci	r31, 0xFE	; 254
 5c2:	80 83       	st	Z, r24
 5c4:	bd cf       	rjmp	.-134    	; 0x540 <__vector_24+0x110>
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
 5c6:	85 ec       	ldi	r24, 0xC5	; 197
 5c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
 5cc:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <twi_state>
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
 5d0:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <twi_rxBufferIndex>
 5d4:	80 32       	cpi	r24, 0x20	; 32
 5d6:	30 f4       	brcc	.+12     	; 0x5e4 <__vector_24+0x1b4>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
 5d8:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <twi_rxBufferIndex>
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	eb 5b       	subi	r30, 0xBB	; 187
 5e0:	fe 4f       	sbci	r31, 0xFE	; 254
 5e2:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
 5e4:	60 91 65 01 	lds	r22, 0x0165	; 0x800165 <twi_rxBufferIndex>
 5e8:	70 e0       	ldi	r23, 0x00	; 0
 5ea:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <twi_onSlaveReceive>
 5ee:	f0 91 44 01 	lds	r31, 0x0144	; 0x800144 <twi_onSlaveReceive+0x1>
 5f2:	85 e4       	ldi	r24, 0x45	; 69
 5f4:	91 e0       	ldi	r25, 0x01	; 1
 5f6:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
 5f8:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <twi_rxBufferIndex>
 5fc:	36 c0       	rjmp	.+108    	; 0x66a <__vector_24+0x23a>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
 5fe:	84 e0       	ldi	r24, 0x04	; 4
 600:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
 604:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
 608:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
 60c:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <twi_onSlaveTransmit>
 610:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <twi_onSlaveTransmit+0x1>
 614:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
 616:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <twi_txBufferLength>
 61a:	81 11       	cpse	r24, r1
 61c:	05 c0       	rjmp	.+10     	; 0x628 <__vector_24+0x1f8>
        twi_txBufferLength = 1;
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
 624:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
 628:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <twi_txBufferIndex>
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	8e 0f       	add	r24, r30
 630:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <twi_txBufferIndex>
 634:	f0 e0       	ldi	r31, 0x00	; 0
 636:	e1 5e       	subi	r30, 0xE1	; 225
 638:	fe 4f       	sbci	r31, 0xFE	; 254
 63a:	80 81       	ld	r24, Z
 63c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
 640:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <twi_txBufferIndex>
 644:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <twi_txBufferLength>
 648:	98 17       	cp	r25, r24
 64a:	08 f4       	brcc	.+2      	; 0x64e <__vector_24+0x21e>
 64c:	79 cf       	rjmp	.-270    	; 0x540 <__vector_24+0x110>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
 64e:	85 e8       	ldi	r24, 0x85	; 133
 650:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 654:	0a c0       	rjmp	.+20     	; 0x66a <__vector_24+0x23a>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 656:	85 ec       	ldi	r24, 0xC5	; 197
 658:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
 65c:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <twi_state>
 660:	04 c0       	rjmp	.+8      	; 0x66a <__vector_24+0x23a>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
 662:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <twi_error>
      twi_stop();
 666:	0e 94 8a 00 	call	0x114	; 0x114 <twi_stop>
      break;
  }
}
 66a:	ff 91       	pop	r31
 66c:	ef 91       	pop	r30
 66e:	bf 91       	pop	r27
 670:	af 91       	pop	r26
 672:	9f 91       	pop	r25
 674:	8f 91       	pop	r24
 676:	7f 91       	pop	r23
 678:	6f 91       	pop	r22
 67a:	5f 91       	pop	r21
 67c:	4f 91       	pop	r20
 67e:	3f 91       	pop	r19
 680:	2f 91       	pop	r18
 682:	0f 90       	pop	r0
 684:	0f be       	out	0x3f, r0	; 63
 686:	0f 90       	pop	r0
 688:	1f 90       	pop	r1
 68a:	18 95       	reti

0000068c <_GLOBAL__I_65535_0_I2C_LCD1602.ino.cpp.o.1817>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 68c:	ea eb       	ldi	r30, 0xBA	; 186
 68e:	f1 e0       	ldi	r31, 0x01	; 1
 690:	13 82       	std	Z+3, r1	; 0x03
 692:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 694:	88 ee       	ldi	r24, 0xE8	; 232
 696:	93 e0       	ldi	r25, 0x03	; 3
 698:	a0 e0       	ldi	r26, 0x00	; 0
 69a:	b0 e0       	ldi	r27, 0x00	; 0
 69c:	84 83       	std	Z+4, r24	; 0x04
 69e:	95 83       	std	Z+5, r25	; 0x05
 6a0:	a6 83       	std	Z+6, r26	; 0x06
 6a2:	b7 83       	std	Z+7, r27	; 0x07
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
 6a4:	84 e0       	ldi	r24, 0x04	; 4
 6a6:	91 e0       	ldi	r25, 0x01	; 1
 6a8:	91 83       	std	Z+1, r25	; 0x01
 6aa:	80 83       	st	Z, r24
 6ac:	e6 ec       	ldi	r30, 0xC6	; 198
 6ae:	f1 e0       	ldi	r31, 0x01	; 1
 6b0:	13 82       	std	Z+3, r1	; 0x03
 6b2:	12 82       	std	Z+2, r1	; 0x02
//
// Note, however, that resetting the Arduino doesn't reset the LCD, so we
// can't assume that its in that state when a sketch starts (and the
// LiquidCrystal constructor is called).

LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr,uint8_t lcd_cols,uint8_t lcd_rows)
 6b4:	86 e1       	ldi	r24, 0x16	; 22
 6b6:	91 e0       	ldi	r25, 0x01	; 1
 6b8:	91 83       	std	Z+1, r25	; 0x01
 6ba:	80 83       	st	Z, r24
{
  _Addr = lcd_Addr;
 6bc:	87 e2       	ldi	r24, 0x27	; 39
 6be:	84 83       	std	Z+4, r24	; 0x04
  _cols = lcd_cols;
 6c0:	80 e1       	ldi	r24, 0x10	; 16
 6c2:	81 87       	std	Z+9, r24	; 0x09
  _rows = lcd_rows;
 6c4:	82 e0       	ldi	r24, 0x02	; 2
 6c6:	82 87       	std	Z+10, r24	; 0x0a
  _backlightval = LCD_NOBACKLIGHT;
 6c8:	13 86       	std	Z+11, r1	; 0x0b
 6ca:	08 95       	ret

000006cc <main>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 6cc:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 6ce:	84 b5       	in	r24, 0x24	; 36
 6d0:	82 60       	ori	r24, 0x02	; 2
 6d2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 6d4:	84 b5       	in	r24, 0x24	; 36
 6d6:	81 60       	ori	r24, 0x01	; 1
 6d8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 6da:	85 b5       	in	r24, 0x25	; 37
 6dc:	82 60       	ori	r24, 0x02	; 2
 6de:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 6e0:	85 b5       	in	r24, 0x25	; 37
 6e2:	81 60       	ori	r24, 0x01	; 1
 6e4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 6e6:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 6ea:	81 60       	ori	r24, 0x01	; 1
 6ec:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 6f0:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 6f4:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 6f8:	82 60       	ori	r24, 0x02	; 2
 6fa:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 6fe:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 702:	81 60       	ori	r24, 0x01	; 1
 704:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 708:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 70c:	81 60       	ori	r24, 0x01	; 1
 70e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 712:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 716:	84 60       	ori	r24, 0x04	; 4
 718:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 71c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 720:	81 60       	ori	r24, 0x01	; 1
 722:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 726:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 72a:	84 60       	ori	r24, 0x04	; 4
 72c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		sbi(ADCSRA, ADPS1);
 730:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 734:	82 60       	ori	r24, 0x02	; 2
 736:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		sbi(ADCSRA, ADPS0);
 73a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 73e:	81 60       	ori	r24, 0x01	; 1
 740:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 744:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 748:	80 68       	ori	r24, 0x80	; 128
 74a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 74e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	setup();
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 752:	c0 e0       	ldi	r28, 0x00	; 0
 754:	d0 e0       	ldi	r29, 0x00	; 0
 756:	20 97       	sbiw	r28, 0x00	; 0
 758:	f1 f3       	breq	.-4      	; 0x756 <main+0x8a>
 75a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 75e:	fb cf       	rjmp	.-10     	; 0x756 <main+0x8a>

00000760 <__tablejump2__>:
 760:	ee 0f       	add	r30, r30
 762:	ff 1f       	adc	r31, r31
 764:	05 90       	lpm	r0, Z+
 766:	f4 91       	lpm	r31, Z
 768:	e0 2d       	mov	r30, r0
 76a:	09 94       	ijmp

0000076c <abort>:
 76c:	81 e0       	ldi	r24, 0x01	; 1
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	f8 94       	cli
 772:	0c 94 bb 03 	jmp	0x776	; 0x776 <_exit>

00000776 <_exit>:
 776:	f8 94       	cli

00000778 <__stop_program>:
 778:	ff cf       	rjmp	.-2      	; 0x778 <__stop_program>
