LiquidCrystal_I2C(0x27,16,2)
{
  _Addr = lcd_Addr; 0x27
  _cols = lcd_cols; 16
  _rows = lcd_rows; 2
  _backlightval = LCD_NOBACKLIGHT; 0x00
}

void LiquidCrystal_I2C::init(){
  Wire.begin();
  ~~~~~~~~~~~~~>
    rxBufferIndex = 0;
    rxBufferLength = 0;
    txBufferIndex = 0;
    txBufferLength = 0;
    twi_init();
    ~~~~~~~~~~~~~>
      twi_state = 0;
      twi_sendStop = true;    // default value
      twi_inRepStart = false;
      digitalWrite(SDA, 1);
      digitalWrite(SCL, 1);
      cbi(TWSR, TWPS0);
      cbi(TWSR, TWPS1);
      TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
      TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
  _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    _displayfunction = 0x00 | 0x00 | 0x00; 0x00
  begin(16, 2); 
  ~~~~~~~~~~~~~>
    _displayfunction |= LCD_2LINE;
      _displayfunction |= 0x08; 0x08
    _numlines = lines; 2
    delay(50);
    expanderWrite(0x00); // reset expanderand turn backlight off (Bit 8 =1)
    ~~~~~~~~~~~~~>
      Wire.beginTransmission(0x27);
      ~~~~~~~~~~~~~>
        transmitting = 1;
        txAddress = 0x27;
        txBufferIndex = 0;
        txBufferLength = 0;
      printIIC(0x00 | 0x00);
      ~~~~~~~~~~~~~>
        Wire.write(0x00)
         ~~~~~~~~~~~~~>
            txBuffer[0] = 0x00;
            ++txBufferIndex; 1
            // update amount in buffer   
            txBufferLength = 1;  
      Wire.endTransmission();
      ~~~~~~~~~~~~~> 
        // transmit buffer (blocking)
        uint8_t ret = twi_writeTo(0x27, txBuffer, 1, 1, sendStop);
        ~~~~~~~~~~~~~> 
          uint8_t i;
          twi_state = 2;
          twi_sendStop = sendStop;
          // reset error state (0xFF.. no error occured)
          twi_error = 0xFF;
          twi_masterBufferIndex = 0;
          twi_masterBufferLength = 1;
          // copy data to twi buffer
          for(i = 0; i < 1; ++i){
            twi_masterBuffer[i] = txBuffer[i];
          }
          // build sla+w, slave device address + w bit
          twi_slarw = TW_WRITE;
          twi_slarw |= address << 1;
          // send start condition
          TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
        // reset tx buffer iterator vars
        txBufferIndex = 0;
        txBufferLength = 0;
        // indicate that we are done transmitting
        transmitting = 0; 
      delay(1000);

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03 << 4); 0x30
    ~~~~~~~~~~~~~> 
      expanderWrite(0x30);
      ~~~~~~~~~~~~~> 
        Wire.beginTransmission(0x27);
        printIIC(0x30| 0x00);
        Wire.endTransmission();
      pulseEnable(0x30);
      ~~~~~~~~~~~~~>
        expanderWrite(0x30 | B00000100); 0x34 // En high 
        delayMicroseconds(1);   // enable pulse must be >450ns
    
        expanderWrite(0x30 & ~B00000100); 0x30 // En low
        delayMicroseconds(50);    // commands need > 37us to settle
    delayMicroseconds(4500); // wait min 4.1ms

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03 << 4);
    delayMicroseconds(4500); // wait min 4.1ms

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03 << 4);
    delayMicroseconds(4500); // wait min 4.1ms

    // finally, set to 4-bit interface
    write4bits(0x02 << 4); 

    // set # lines, font size, etc.
    command(0x20 | 0x08); 0x28
    ~~~~~~~~~~~~~>
      send(0x28, 0);
      ~~~~~~~~~~~~~>
      uint8_t highnib=0x28&0xf0; 0x20
      uint8_t lownib=(0x28<<4)&0xf0; 0x80
      write4bits((highnib)|0); 0x20
      write4bits((lownib)|0);  0x80

    // turn the display on with no cursor or blinking default
    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
      _displaycontrol = 0x04 | 0x00 | 0x00; 0x04
    display();
    ~~~~~~~~~~~~~>
      _displaycontrol |= 0x04;0x04
      command(0x08 | 0x04);   0x0C

    // clear it off
    clear();
     ~~~~~~~~~~~~~>
      command(0x01);// clear display, set cursor position to zero
      delayMicroseconds(2000);  // this command takes a long time!

    // Initialize to default text direction (for roman languages)
    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
      _displaymode = 0x02 | 0x00; 0x02
    
    // set the entry mode
    command(0x04 | 0x02); 0x06
    
    home();
    ~~~~~~~~~~~~~>
      command(0x02);  // set cursor position to zero
      delayMicroseconds(2000);  // this command takes a long time!
}

void LiquidCrystal_I2C::backlight(void) {
  _backlightval=0x08;
  expanderWrite(0);
  ~~~~~~~~~~~~~> 
    Wire.beginTransmission(0x27);
    printIIC(0x00| 0x08);
    Wire.endTransmission();
}

void LiquidCrystal_I2C::setCursor(uint8_t col, uint8_t row){
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
  if ( 0 > (2-1) ) {
    row = _numlines-1;    // we count rows starting w/0
  }
  command(0x80 | (0 + 0x00));
}

