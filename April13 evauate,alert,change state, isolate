.def status =r19 ; 0000 ssss
.def statusi =r20 ;0000 iiii
.def statusea =r21 ;0000 00ea
.def numofsetbits =r22

.org 0x0000
rjmp	reset
.org 0x0002
jmp INT0_IR ; IRQ0
.org 0x0004
jmp INT1_IR ; IRQ1
.org 0x0020
rjmp overflow_handler


reset:
	;initialize SP
	ldi	r16,high(RAMEND)
	out	SPH,r16
	ldi	r16,low(RAMEND)
	out	SPL,r16
	clr r16
	clr r17

	;initialize TCNT0
	ldi r16,0b00000101
	out TCCR0B,r16 ;set cs00,cs01,cs02 to 101, set TCNT0 to FCPU/1024 mode
	ldi r16,0b00000001
	sts TIMSK0,r16 ;set  the timer overflow interrupt enable (TOIE0) bit
	clr r16
	out TCNT0,r16 ;initialize timer/counter to 0

	;in	r16,MCUCR	; set interrupt vectore to address 0x0002
	;ori	r16,(1<<IVCE)
	;out	MCUCR,r16
	;andi	r16,0xfc
	;out	MCUCR,r16

	;initialize INIT0, INIT1
	cbi	EIMSK,INT0	; disable the interrupt while we configure INT0
	cbi	EIMSK,INT1  ; disable the interrupt while we configure INT1
	ldi	r16,0b00001010	; set up high to low transition interrupt for INT0 and IN1
	sts	EICRA,r16
	sbi	EIMSK,INT0	; and enable the interrupt for INT0
	sbi	EIMSK,INT1	; and enable the interrupt for INT1
	
	sei; enable global interrupts, equivalent to sbi SREG,I

	;initialize I/O 
	ldi r16,0b00001111
	out DDRC,r16	;C(0-4) & B(0-4) are outputs
	out DDRB,r16
	ldi r16,0b00000000 
	out DDRD,r16	;D(0-7) are inputs
	ldi r17,0b11111111 ;pull up
	out PORTD,r17

	;initialize status
	clr r20
	clr r21
	clr r19
	clr r22
	clr status
	clr r16
	clr r17

loop:
	call changestate
	call findnumsetbits
	call checke
	call checka
	;out PORTB,numofsetbits
	out PORTB,statusea
	cpi statusea,2
	brne PC+2
	call do_evacuate
	rjmp loop

findnumsetbits:
	
	clr r16
	;check for isolate
	mov r15,statusi
	mov r16,status ;eor statusi & status
	eor r16,r15
	push r16
	lsr r16
	andi r16,0x55
	clr r17
	pop r17
	sub r17,r16
	mov r16,r17
	andi r17,0x33
	lsr r16
	lsr r16
	andi r16,0x33
	add r16,r17
	mov r17,r16
	lsr r16
	lsr r16
	lsr r16
	lsr r16
	add r16,r17
	andi r16,0x0f
	mov numofsetbits,r16
	;out PORTB,r16
	ret

changestate:
	sbis PIND,4
	call s1
	sbis PIND,5
	call s2
	sbis PIND,6
	call s3
	sbis PIND,7
	call s4
	ret

checke:
		clr r16
		ldi r16,0b00000010
		cp numofsetbits,r16
		brlo endchecke ;branch if numbersetbits is smaller than 2
		ldi statusea,0b0000010
		endchecke:
		clr r16
		ret

checka:
	clr r16
	ldi r16,0b00000001
	cp numofsetbits,r16
	brne endchecka ;branch if numbersetbits is not equal to 1
	ldi statusea,0b0000001
	endchecka:
	clr r16
	ret

s1:
	sbi PORTC,0
	sbr status,1
	ret
s2:
	sbi PORTC,1
	sbr status,(1<<1)
	ret
s3:
	sbi PORTC,2
	sbr status,(1<<2)
	ret
s4:
	sbi PORTC,3
	sbr status,(1<<3)
	ret

delay4_0:
	call delay2_0
	call delay2_0
	ret

delay3_0:
	call delay1_0
	call delay1_0
	call delay1_0
	ret

delay2_0:
	call delay1_0
	call delay1_0
	ret

delay1_0:
	call delay0_5
	call delay0_5
	ret


delay0_5:
	clr r18 ;set overflows to 0
	sec_count:	
		cpi r18,30 ;compare overflow to 30	
	brne sec_count ;branch back to sec_count if not equal
	ret	;if 30 overflows have occured return to loop

overflow_handler:
	inc r18	;add 1 to the counter in the overflow interrput
	cpi r18,61	;compare r18 with 61
	brne PC+2 ;skip next line if not equal
	clr r18	;if 61 overflows occured, reset the counter to zero
	reti	;return from interrupt

INT0_IR:
	ldi statusea,0b00000010
	reti

INT1_IR:
	ldi statusea,0b00000000
	mov statusi,status
	out PORTC,status
	reti

do_alert:
	reti
do_evacuate:
	sbi PORTC,0
	sbi PORTC,1
	sbi PORTC,2
	sbi PORTC,3
	call delay0_5
	cbi  PORTC,0
	cbi  PORTC,1
	cbi  PORTC,2
	cbi  PORTC,3
	call delay0_5
	reti

	
