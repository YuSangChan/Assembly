.def data       = r18
.def blacklight       = r19


.org	0x0000
jmp RESET ; Reset

RESET: 
ldi r16,high(RAMEND) ; Main program start
out SPH,r16 ; Set Stack Pointer to top of RAM
ldi r16,low(RAMEND)
out SPL,r16
cli ; No interrupts

;use to debug
sbi	DDRB,5
sbi DDRB,4
;sbi PORTB,5

;pull up i2C port
sbi PORTC,5
sbi PORTC,4

;I2C LCD address
ldi		r24,0x27

; I2C clock rate:100kHz
;initialize twi prescaler and bit rate
ldi		r16,0x00
sts		TWSR,r16
ldi		r16,0x48	; setup TWI frequency scaling
sts		TWBR,r16
ldi		r16,(1<<TWEA) | (1<<TWIE) | (1<<TWEN) ;enable twi module, acks, and twi interrupt
sts		TWCR,r16

;setup the LCD
call LCDsetup
call LCDBacklightOn
call LCDsetPos
call LCDDisplayString
rjmp MainLoop

;send Start
sendTWI_Start:
ldi		r16,(1<<TWINT) | (1<<TWEA) | (1<<TWEN) | (1<<TWIE) | (1<<TWSTA)
sts		TWCR,r16
call	waitTWI

lds		r16,TWSR
andi	r16,0xf8		; mask out 
cpi		r16,0x08		; TWSR = START (0x08)
ret

;send Address
sendTWI_SLA:
mov 	r16,r24
add 	r16,r16
sts		TWDR,r16
ldi		r16,(1<<TWINT) | (1<<TWEA) | (1<<TWEN) | (1<<TWIE) 
sts		TWCR,r16
call	waitTWI
lds		r16,TWSR
andi	r16,0xf8		; mask out 
cpi		r16,0x18		; TWSR = SLA+W sent, ACK received (0x18)
ret


sendTWI_done:
serror:
;
; send stop bit and we're done
;
sendTWI_Stop:
ldi		r16,(1<<TWINT) | (1<<TWEN) | (1<<TWSTO)		; and send stop
sts		TWCR,r16
ldi		r16,0
sendTWI_Delay:
dec		r16
brne	sendTWI_Delay
ret

;waiting for the TWI 
waitTWI:
lds	r15,TWCR
sbrs	r15,TWINT		; wait until transmitted
rjmp	waitTWI
ret

;send a byte hex (data,data|en,data|~en)
send0xXX:
call sendcmdenoff
call sendcmdenon
call sendcmdenoff
ret

;send data|en
sendcmdenon:
call	sendTWI_Start
call 	sendTWI_SLA

mov r16,data
mov r17,blacklight
or r16,r17
ori 	r16,0x04	; set enable bit high
sts		TWDR,r16
ldi		r16,(1<<TWINT) | (1<<TWEA) | (1<<TWEN) | (1<<TWIE) 
sts		TWCR,r16
call	waitTWI
lds		r20,TWSR
andi	r20,0xf8		; mask out 
cpi		r20,0x28		; TWSR = data sent, ACK received (0x28)
ret

;send data|~en
sendcmdenoff:
call	sendTWI_Start
call 	sendTWI_SLA

mov r16,data
mov r17,blacklight
or r16,r17
ori 	r16,0x00	; set enable bit high
sts		TWDR,r16
ldi		r16,(1<<TWINT) | (1<<TWEA) | (1<<TWEN) | (1<<TWIE) 
sts		TWCR,r16
call	waitTWI
lds		r20,TWSR
andi	r20,0xf8		; mask out 
cpi		r20,0x28		; TWSR = data sent, ACK received (0x28)
ret

;setup function
LCDsetup:
;for testing
;ldi r16,0x00
;ldi r17,0x00
;call send0xXX
;call sendTWI_Start
;call sendTWI_SLA
;call sendTWI_Stop
;call sendcmdenon
;call sendcmdenoff

;start real codes here

//SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
//according to datasheet, we need at least 40ms after power rises above 2.7V
//before sending commands. Arduino can turn on way before 4.5V so we'll wait 50ms
call delay50ms

//pull both RS and R/W low to begin commands
ldi data,0x00
ldi blacklight,0x00
call sendcmdenoff
call delay1000ms


//put the LCD into 4 bit mode
// this is according to the hitachi HD44780 datasheet
// figure 24, pg 46
	
// we start in 8bit mode, try to set 4 bit mode
ldi data,0x30
ldi blacklight,0x00
call send0xXX
call delay5ms; // wait min 4.1ms
   
// second try
ldi data,0x30
ldi blacklight,0x00
call send0xXX
call delay5ms; // wait min 4.1ms
   
// third go!
ldi data,0x30
ldi blacklight,0x00
call send0xXX
call delay5ms;
   
// finally, set to 4-bit interface
ldi data,0x20
ldi blacklight,0x00
call send0xXX
call delay5ms; 

// set # lines, font size, etc.
ldi data,0x20
ldi blacklight,0x00
call send0xXX
call delay5ms; 

ldi data,0x80
ldi blacklight,0x00
call send0xXX
call delay5ms; 

// turn the display on with no cursor or blinking default
ldi data,0x00
ldi blacklight,0x00
call send0xXX
call delay5ms; 

ldi data,0xC0
ldi blacklight,0x00
call send0xXX
call delay5ms; 

// clear it off
ldi data,0x00
ldi blacklight,0x00
call send0xXX
call delay5ms; 

ldi data,0x10
ldi blacklight,0x00
call send0xXX
call delay5ms

// Initialize to default text direction (for roman languages)
// set the entry mode
ldi data,0x00
ldi blacklight,0x00
call send0xXX
call delay5ms; 

ldi data,0x60
ldi blacklight,0x00
call send0xXX
call delay5ms

// reset to home (0,0)
ldi data,0x00
ldi blacklight,0x00
call send0xXX
call delay5ms; 

ldi data,0x20
ldi blacklight,0x00
call send0xXX
call delay5ms

ret

LCDBacklightOn:
ldi data,0x00
ldi blacklight,0x08
call sendcmdenoff
call delay5ms
ret

LCDsetPos: //default 0,0
ldi data,0x80
ldi blacklight,0x08
call send0xXX
call delay5ms; 

ldi data,0x00
ldi blacklight,0x08
call send0xXX
call delay5ms
ret


LCDDisplayString:
;S1:N
	;S
	ldi data,0x50
	ldi blacklight,0x09
	call send0xXX
	call delay5ms; 

	ldi data,0x30
	ldi blacklight,0x09
	call send0xXX
	call delay5ms
	;1
	ldi data,0x30
	ldi blacklight,0x09
	call send0xXX
	call delay5ms; 

	ldi data,0x10
	ldi blacklight,0x09
	call send0xXX
	call delay5ms
	;:
	ldi data,0x30
	ldi blacklight,0x09
	call send0xXX
	call delay5ms; 

	ldi data,0xA0
	ldi blacklight,0x09
	call send0xXX
	call delay5ms
	;N
	ldi data,0x40
	ldi blacklight,0x09
	call send0xXX
	call delay5ms; 

	ldi data,0xE0
	ldi blacklight,0x09
	call send0xXX
	call delay5ms

;S2:N
	;S
	ldi data,0x50
	ldi blacklight,0x09
	call send0xXX
	call delay5ms; 

	ldi data,0x30
	ldi blacklight,0x09
	call send0xXX
	call delay5ms
	;2
	ldi data,0x30
	ldi blacklight,0x09
	call send0xXX
	call delay5ms; 

	ldi data,0x20
	ldi blacklight,0x09
	call send0xXX
	call delay5ms
	;:
	ldi data,0x30
	ldi blacklight,0x09
	call send0xXX
	call delay5ms; 

	ldi data,0xA0
	ldi blacklight,0x09
	call send0xXX
	call delay5ms
	;N
	ldi data,0x40
	ldi blacklight,0x09
	call send0xXX
	call delay5ms; 

	ldi data,0xE0
	ldi blacklight,0x09
	call send0xXX
	call delay5ms

;S3:N
	;S
	ldi data,0x50
	ldi blacklight,0x09
	call send0xXX
	call delay5ms; 

	ldi data,0x30
	ldi blacklight,0x09
	call send0xXX
	call delay5ms
	;3
	ldi data,0x30
	ldi blacklight,0x09
	call send0xXX
	call delay5ms; 

	ldi data,0x30
	ldi blacklight,0x09
	call send0xXX
	call delay5ms
	;:
	ldi data,0x30
	ldi blacklight,0x09
	call send0xXX
	call delay5ms; 

	ldi data,0xA0
	ldi blacklight,0x09
	call send0xXX
	call delay5ms
	;N
	ldi data,0x40
	ldi blacklight,0x09
	call send0xXX
	call delay5ms; 

	ldi data,0xE0
	ldi blacklight,0x09
	call send0xXX
	call delay5ms

;S4:N
	;S
	ldi data,0x50
	ldi blacklight,0x09
	call send0xXX
	call delay5ms; 

	ldi data,0x30
	ldi blacklight,0x09
	call send0xXX
	call delay5ms
	;2
	ldi data,0x30
	ldi blacklight,0x09
	call send0xXX
	call delay5ms; 

	ldi data,0x40
	ldi blacklight,0x09
	call send0xXX
	call delay5ms
	;:
	ldi data,0x30
	ldi blacklight,0x09
	call send0xXX
	call delay5ms; 

	ldi data,0xA0
	ldi blacklight,0x09
	call send0xXX
	call delay5ms
	;N
	ldi data,0x40
	ldi blacklight,0x09
	call send0xXX
	call delay5ms; 

	ldi data,0xE0
	ldi blacklight,0x09
	call send0xXX
	call delay5ms
	ret


;delay functions (1000,500,100,50,10,5)
;1sec
delay1000ms:
call delay500ms
call delay500ms
ret
;.5sec
delay500ms:
call delay100ms
call delay100ms
call delay100ms
call delay100ms
call delay100ms
ret
;.1sec
delay100ms:
call delay50ms
call delay50ms
ret
;.05sec
delay50ms:
call delay10ms
call delay10ms
call delay10ms
call delay10ms
ret
;.01sec
delay10ms:
call delay5ms
call delay5ms
ret
;.005sec
delay5ms:
ldi  r21, 104
ldi  r20, 229
L1: 
dec  r20
brne L1
dec  r21
brne L1
ret

;error handling function + debugger
LCD_Setup_Err:
sbi PORTB,4
ret

;main loop
MainLoop:
;debugger to test the delay;
;sbi PORTB,5
;call delay500ms 
;cbi PORTB,5
;call delay500ms

rjmp MainLoop
