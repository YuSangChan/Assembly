.def temp1 = r16
.def temp2 = r17
.def data       = r28
.def blacklight       = r29


.org	0x0000		; start at beginning of program address
	jmp RESET ; Reset	; reset and interrupt vectors
	jmp INT0_IR ; IRQ0
	jmp INT1_IR ; IRQ1
	jmp PCINT0_IR ; PCINT0
	jmp PCINT1_IR ; PCINT1
	jmp PCINT2_IR ; PCINT2
	jmp WDT_IR ; Watchdog Timeout
	jmp TIM2_COMPA ; Timer2 CompareA
	jmp TIM2_COMPB ; Timer2 CompareB
	jmp TIM2_OVF ; Timer2 Overflow
	jmp TIM1_CAPT ; Timer1 Capture
	jmp TIM1_COMPA ; Timer1 CompareA
	jmp TIM1_COMPB ; Timer1 CompareB
	jmp TIM1_OVF ; Timer1 Overflow
	jmp TIM0_COMPA ; Timer0 CompareA
	jmp TIM0_COMPB ; Timer0 CompareB
	jmp TIM0_OVF ; Timer0 Overflow
	jmp SPI_STC ; SPI Transfer Complete
	jmp USART_RXC ; USART RX Complete
	jmp USART_UDRE ; USART UDR Empty
	jmp USART_TXC ; USART TX Complete
	jmp ADC_CC ; ADC Conversion Complete
	jmp EE_RDY ; EEPROM Ready
	jmp ANA_COMP ; Analog Comparator
	jmp TWI_IR ; 2-wire Serial
	jmp SPM_RDY ; SPM Ready

;

PCINT0_IR: rjmp  noint
PCINT1_IR: rjmp  noint
WDT_IR: rjmp  noint
TIM2_COMPA: rjmp  noint
TIM2_COMPB: rjmp  noint
TIM2_OVF: rjmp  noint
TIM1_CAPT: rjmp  noint
TIM1_COMPA: rjmp  noint
TIM1_COMPB: rjmp  noint
TIM1_OVF: rjmp  noint
TIM0_COMPA: rjmp  noint
TIM0_COMPB: rjmp  noint
TIM0_OVF: rjmp  noint
SPI_STC: rjmp  noint
USART_RXC: rjmp  noint
USART_UDRE: rjmp  noint
USART_TXC: rjmp  noint
ADC_CC: rjmp  noint
EE_RDY: rjmp  noint
ANA_COMP: rjmp  noint
TWI_IR: rjmp  noint
SPM_RDY: rjmp  noint
;
; Generic catch everything routine.
; We could jump back to reset to restart everything again, which would be safer.
;
error:
noint:	
	rjmp	noint
;
; RESET program start. Configure the system and execute the main loop
;
RESET: 
ldi temp1,high(RAMEND) ; Main program start
out SPH,temp1 ; Set Stack Pointer to top of RAM
ldi temp1,low(RAMEND)
out SPL,temp1
cli ; No interrupts

;use to debug
;sbi	DDRC,0
;sbi PORTC,0
;sbi	DDRC,1
;sbi PORTC,1
;sbi	DDRC,2
;sbi PORTC,2
;sbi	DDRC,3
;sbi PORTC,3

;sbi DDRB,0
;sbi PORTB,0
;sbi DDRB,1
;sbi PORTB,1
;sbi DDRB,2
;sbi PORTB,2
;sbi DDRB,3
;sbi PORTB,3
;sbi DDRB,4
;sbi PORTB,4
;sbi DDRB,5
;sbi PORTB,5


cbi	DDRD,2		; set port D bit 2 as an input
cbi	DDRD,3		; set port D bit 2 as an input
cbi	DDRD,4
cbi	DDRD,5
cbi	DDRD,6
cbi	DDRD,7

sbi	PORTD,2		; with pullup enabled
sbi	PORTD,3		; with pullup enabled
sbi	PORTD,4		; with pullup enabled
sbi	PORTD,5		; with pullup enabled
sbi	PORTD,6		; with pullup enabled
sbi	PORTD,7		; with pullup enabled


ldi	r16,0xff
out	DDRC,r16	; all of port B are outputs


	in	r16,MCUCR	; set interrupt vectore to address 0x0002
	ori	r16,(1<<IVCE)
	out	MCUCR,r16
	andi	r16,0xfc
	out	MCUCR,r16

	cbi	EIMSK,INT0	; disable the interrupt while we configure INT0
	cbi	EIMSK,INT1	; disable the interrupt while we configure INT0
	ldi	r16,0b00001010	; set up high to low transition interrupt for INT0
	sts	EICRA,r16
	sbi	EIMSK,INT0	; and enable the interrupt for INT0
	sbi	EIMSK,INT1	; and enable the interrupt for INT0

	;/////////////////////////////////
	;Setup Pin change interrupts	 /
	;PD7,PD6,PD5,PD4				 /
	;/////////////////////////////////
	ldi r16, (1<<PCIE2)
	sts PCICR,r16
	ldi r16,0b11110000
	sts PCMSK2,r16


;pull up i2C port
sbi PORTC,5
sbi PORTC,4

;I2C LCD address
ldi		r24,0x27

; I2C clock rate:100kHz
;initialize twi prescaler and bit rate
ldi		temp1,0x00
sts		TWSR,temp1
ldi		temp1,0x48	; setup TWI frequency scaling
sts		TWBR,temp1
ldi		temp1,(1<<TWEA) | (1<<TWIE) | (1<<TWEN) ;enable twi module, acks, and twi interrupt
sts		TWCR,temp1

;setup the LCD
call LCDsetup
call LCDBacklightOn
call LCDsetPos
call LCDDisplayString
;call LCDDisplayStringPt

	sei			; enable interrupts globally
rjmp MainLoop

;send Start
sendTWI_Start:
ldi		temp1,(1<<TWINT) | (1<<TWEA) | (1<<TWEN) | (1<<TWIE) | (1<<TWSTA)
sts		TWCR,temp1
call	waitTWI

lds		temp1,TWSR
andi	temp1,0xf8		; mask out 
cpi		temp1,0x08		; TWSR = START (0x08)
ret

;send Address
sendTWI_SLA:
mov 	temp1,r24
add 	temp1,temp1
sts		TWDR,temp1
ldi		temp1,(1<<TWINT) | (1<<TWEA) | (1<<TWEN) | (1<<TWIE) 
sts		TWCR,temp1
call	waitTWI
lds		temp1,TWSR
andi	temp1,0xf8		; mask out 
cpi		temp1,0x18		; TWSR = SLA+W sent, ACK received (0x18)
ret


sendTWI_done:
serror:
;
; send stop bit and we're done
;
sendTWI_Stop:
ldi		temp1,(1<<TWINT) | (1<<TWEN) | (1<<TWSTO)		; and send stop
sts		TWCR,temp1
ldi		temp1,0
sendTWI_Delay:
dec		temp1
brne	sendTWI_Delay
ret

;waiting for the TWI 
waitTWI:
lds	r15,TWCR
sbrs	r15,TWINT		; wait until transmitted
rjmp	waitTWI
ret

;send a byte hex (data,data|en,data|~en)
send0xXX:
call sendcmdenoff
call sendTWI_Stop
call sendcmdenon
call sendTWI_Stop
call sendcmdenoff
call sendTWI_Stop
ret

;send data|en
sendcmdenon:
call	sendTWI_Start
call 	sendTWI_SLA

mov temp1,data
mov temp2,blacklight
or temp1,temp2
ori 	temp1,0x04	; set enable bit high
sts		TWDR,temp1
ldi		temp1,(1<<TWINT) | (1<<TWEA) | (1<<TWEN) | (1<<TWIE) 
sts		TWCR,temp1
call	waitTWI
lds		r20,TWSR
andi	r20,0xf8		; mask out 
cpi		r20,0x28		; TWSR = data sent, ACK received (0x28)
ret

;send data|~en
sendcmdenoff:
call	sendTWI_Start
call 	sendTWI_SLA

mov temp1,data
mov temp2,blacklight
or temp1,temp2
ori 	temp1,0x00	; set enable bit high
sts		TWDR,temp1
ldi		temp1,(1<<TWINT) | (1<<TWEA) | (1<<TWEN) | (1<<TWIE) 
sts		TWCR,temp1
call	waitTWI
lds		r20,TWSR
andi	r20,0xf8		; mask out 
cpi		r20,0x28		; TWSR = data sent, ACK received (0x28)
ret

;setup function
LCDsetup:
;for testing
;ldi temp1,0x00
;ldi temp2,0x00
;call send0xXX
;call sendTWI_Start
;call sendTWI_SLA
;call sendTWI_Stop
;call sendcmdenon
;call sendcmdenoff

;start real codes here

//SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
//according to datasheet, we need at least 40ms after power rises above 2.7V
//before sending commands. Arduino can turn on way before 4.5V so we'll wait 50ms
call delay50ms

//pull both RS and R/W low to begin commands
ldi data,0x00
ldi blacklight,0x00
call sendcmdenoff
call delay1000ms


//put the LCD into 4 bit mode
// this is according to the hitachi HD44780 datasheet
// figure 24, pg 46
	
// we start in 8bit mode, try to set 4 bit mode
ldi data,0x30
ldi blacklight,0x00
call send0xXX
call delay5ms; // wait min 4.1ms
   
// second try
ldi data,0x30
ldi blacklight,0x00
call send0xXX
call delay5ms; // wait min 4.1ms
   
// third go!
ldi data,0x30
ldi blacklight,0x00
call send0xXX
call delay5ms;
   
// finally, set to 4-bit interface
ldi data,0x20
ldi blacklight,0x00
call send0xXX
;call delay5ms; 

// set # lines, font size, etc.
ldi data,0x20
ldi blacklight,0x00
call send0xXX
;call delay5ms; 

ldi data,0x80
ldi blacklight,0x00
call send0xXX
;call delay5ms; 

// turn the display on with no cursor or blinking default
ldi data,0x00
ldi blacklight,0x00
call send0xXX
;call delay5ms; 

ldi data,0xC0
ldi blacklight,0x00
call send0xXX
;call delay5ms; 

// clear it off
ldi data,0x00
ldi blacklight,0x00
call send0xXX
;call delay5ms; 

ldi data,0x10
ldi blacklight,0x00
call send0xXX
call delay5ms

// Initialize to default text direction (for roman languages)
// set the entry mode
ldi data,0x00
ldi blacklight,0x00
call send0xXX
;call delay5ms; 

ldi data,0x60
ldi blacklight,0x00
call send0xXX
;call delay5ms

// reset to home (0,0)
ldi data,0x00
ldi blacklight,0x00
call send0xXX
;call delay5ms; 

ldi data,0x20
ldi blacklight,0x00
call send0xXX
call delay5ms

ret

LCDBacklightOn:
ldi data,0x00
ldi blacklight,0x08
call sendcmdenoff
;call delay5ms
ret

LCDsetPos: //default 0,0
ldi data,0x80
ldi blacklight,0x08
call send0xXX
;call delay5ms; 

ldi data,0x00
ldi blacklight,0x08
call send0xXX
;call delay5ms
ret


LCDDisplayString:
;S1:N
	;S
	ldi data,0x50
	ldi blacklight,0x09
	call send0xXX
	ldi data,0x30
	ldi blacklight,0x09
	call send0xXX
	
	;1
	ldi data,0x30
	ldi blacklight,0x09
	call send0xXX
	ldi data,0x10
	ldi blacklight,0x09
	call send0xXX

	;:
	ldi data,0x30
	ldi blacklight,0x09
	call send0xXX
	ldi data,0xA0
	ldi blacklight,0x09
	call send0xXX

	;N
	ldi data,0x40
	ldi blacklight,0x09
	call send0xXX
	ldi data,0xE0
	ldi blacklight,0x09
	call send0xXX


;S2:N
	;S
	ldi data,0x50
	ldi blacklight,0x09
	call send0xXX
	ldi data,0x30
	ldi blacklight,0x09
	call send0xXX

	;2
	ldi data,0x30
	ldi blacklight,0x09
	call send0xXX
	ldi data,0x20
	ldi blacklight,0x09
	call send0xXX

	;:
	ldi data,0x30
	ldi blacklight,0x09
	call send0xXX
	ldi data,0xA0
	ldi blacklight,0x09
	call send0xXX

	;N
	ldi data,0x40
	ldi blacklight,0x09
	call send0xXX
	ldi data,0xE0
	ldi blacklight,0x09
	call send0xXX

;S3:N
	;S
	ldi data,0x50
	ldi blacklight,0x09
	call send0xXX
	ldi data,0x30
	ldi blacklight,0x09
	call send0xXX

	;3
	ldi data,0x30
	ldi blacklight,0x09
	call send0xXX
	ldi data,0x30
	ldi blacklight,0x09
	call send0xXX

	;:
	ldi data,0x30
	ldi blacklight,0x09
	call send0xXX
	ldi data,0xA0
	ldi blacklight,0x09
	call send0xXX

	;N
	ldi data,0x40
	ldi blacklight,0x09
	call send0xXX
	ldi data,0xE0
	ldi blacklight,0x09
	call send0xXX

;S4:N
	;S
	ldi data,0x50
	ldi blacklight,0x09
	call send0xXX
	ldi data,0x30
	ldi blacklight,0x09
	call send0xXX

	;2
	ldi data,0x30
	ldi blacklight,0x09
	call send0xXX
	ldi data,0x40
	ldi blacklight,0x09
	call send0xXX

	;:
	ldi data,0x30
	ldi blacklight,0x09
	call send0xXX
	ldi data,0xA0
	ldi blacklight,0x09
	call send0xXX

	;N
	ldi data,0x40
	ldi blacklight,0x09
	call send0xXX
	ldi data,0xE0
	ldi blacklight,0x09
	call send0xXX
	ret

LCD_init_Msg:
;.DB	 "S1:NS2:AS3:ES4:I"
.DB	     "Hello World Max!"

LCDDisplayStringPt:
	ldi r22,16
	ldi	zl,low(LCD_init_Msg*2)
	ldi	zh,high(LCD_init_Msg*2)
	loopstart:
	lpm data,Z+
	push data
	andi data, 0b11110000
	ldi blacklight,0x09
	call send0xXX
	pop data
	swap data
	andi data,0b11110000
	ldi blacklight,0x09
	call send0xXX
	dec r22
	cpi r22,0
	brne loopstart
	ret



;delay functions (1000,500,100,50,10,5)
;1sec
delay1000ms:
call delay500ms
call delay500ms
ret
;.5sec
delay500ms:
call delay100ms
call delay100ms
call delay100ms
call delay100ms
call delay100ms
ret
;.1sec
delay100ms:
call delay50ms
call delay50ms
ret
;.05sec
delay50ms:
call delay10ms
call delay10ms
call delay10ms
call delay10ms
ret
;.01sec
delay10ms:
call delay5ms
call delay5ms
ret
;.005sec
delay5ms:
ldi  r21, 104
ldi  r20, 229
L1: 
dec  r20
brne L1
dec  r21
brne L1
ret

;error handling function + debugger
LCD_Setup_Err:
sbi PORTB,4
ret

;main loop
MainLoop:
;debugger to test the delay;
;sbi PORTB,0
;call delay500ms 
;cbi PORTB,0
;call delay500ms

rjmp MainLoop

;
; Invert the values in port B
;
INT0_IR:
	call LCDsetPos
	call LCDDisplayStringPt
	sbi PORTC,0
	reti			; and we're done with the interrupt

;
; Invert the values in port B
;
INT1_IR:
	call LCDsetPos
	call LCDDisplayStringPt
	sbi PORTC,3
	reti			; and we're done with the interrupt

PCINT2_IR:
	call LCDsetPos
	call LCDDisplayStringPt
	sbi PORTC,2
	reti			; and we're done with the interrupt
